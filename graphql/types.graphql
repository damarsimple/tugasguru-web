"A date String with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime String with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Province {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    cities: [City!]! @hasMany
}

type City {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    province: Province @belongsTo
    type: String
    schools: [School!]! @hasMany
    districts: [District!]! @hasMany
}

type District {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    city: City @belongsTo
}

type School {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    city: City @belongsTo
    province: Province @belongsTo
    district: District @belongsTo
    schooltype: Schooltype @belongsTo
    address: String
    description: String
    latitude: String
    longtitude: String
    npsn: String

    cover: Attachment @morphOne
    logo: Attachment @morphOne
    announcements: [Article!]! @hasMany(type: CONNECTION)
    homeroomteachers: [User!]! @belongsToMany
    headmasters: [User!]! @belongsToMany
    admins: [User!]! @belongsToMany
    counselors: [User!]! @belongsToMany
    teachers: [User!]! @hasMany
    students: [User!]! @hasMany
    schooltype: Schooltype @belongsTo
    subjects: [Subject!]! @belongsToMany
    classrooms: [Classroom!]! @hasMany
    attendances(
        where: _ @whereConditions(columns: ["id"])
        hasUser: _ @whereHasConditions(columns: ["roles"])
    ): [Attendance!]! @paginate(type: CONNECTION)

    ppdbform: FormTemplate

    extracurriculars: [Extracurricular!]! @belongsToMany
    majors: [Major!]! @belongsToMany
    waves: [Wave!]! @hasMany
    openWaves: [Wave!]! @hasMany
    studentppdbs: [StudentPpdb!]! @paginate(type: CONNECTION)
}

type Absent {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    user: User
    receiver: User
    type: String!
    reason: String!
    finish_at: DateTime
    start_at: DateTime
}

type Answer {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    is_correct: Boolean!
    content: String
    question: Question
    attachment: Attachment @morphOne
}

enum Visibility {
    PUBLIK
    PRIVAT
    SELECTPEOPLE
}

type Article {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    user: User!
    slug: String!
    content: String!
    is_paid: Boolean!
    role: String!
    visibility: Visibility
    school: School
    price: Price
    thumbnail: Attachment @morphOne
    subjects: [Subject!]! @belongsToMany
    classtypes: [Classtype!]! @belongsToMany
    meetings: [Meeting!]! @hasMany

    morphable: String!
    likes: [Like!]!
        @orderBy(column: "created_at", direction: DESC)
        @morphMany(type: CONNECTION)
    comments: [Comment!]!
        @orderBy(column: "created_at", direction: DESC)
        @morphMany(type: CONNECTION)

    likeCount: Int! @count(relation: "likes")
    commentCount: Int! @count(relation: "comments")
}

type Assigment {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    user: User!
    content: String!
    close_at: String
    is_odd_semester: Boolean!
    subject: Subject!
    classroom: Classroom!
    studentassigments: [StudentAssigment!]! @hasMany
    myanswer: StudentAssigment
}

union Attachable = User

type Attachment {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    path: String!
    mime: String!
    is_processed: Boolean!
    original_size: String
    compressed_size: String
    role: String
    attachable: Attachable @morphTo
}

union Agendaable = Meeting | Exam

type Agenda {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    uuid: String!
    user: User @belongsTo
    school: School @belongsTo
    description: String
    attendances: [Attendance!]! @hasMany
    finish_at: DateTime
    agendaable_type: String
}
type Attendance {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user: User @belongsTo
    uuid: String!
    classroom: Classroom @belongsTo
    school: School @belongsTo
    subject: Subject @belongsTo
    agenda: Agenda! @belongsTo
    attended: Boolean!
    reason: String
}

type Classroom {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    students: [User!]! @belongsToMany
    user: User! @belongsTo
    subject: Subject! @belongsTo
    exams: [Exam!]! @hasMany
    classtype: Classtype! @belongsTo
    meetings: [Meeting!]! @hasMany
    name_formatted: String
    meeting: [Meeting!]! @hasMany
    assigments: [Assigment!]! @hasMany
    absents: [Absent!]! @hasMany
}

type Classtype {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    level: Int!
    schooltype: Schooltype! @belongsTo
    name: String
}

type Consultation {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    problem: String!
    notes: String!
    advice: String!
    user: User @belongsTo
    consultant: User @belongsTo
}

type Exam {
    id: ID!
    name: String!
    time_limit: Int!
    allow_show_result: Boolean!
    shuffle: Boolean!
    education_year_start: Int!
    is_odd_semester: Boolean!
    education_year_end: Int!
    hint: String
    description: String
    created_at: DateTime!
    updated_at: DateTime!
    examsessions: [Examsession!]! @hasMany
    examresults: [Examresult!]! @hasMany
    questions: [Question!]! @belongsToMany
    subject: Subject! @belongsTo
    classroom: Classroom! @belongsTo
    supervisors: [User!]! @belongsToMany
    examtype: Examtype! @belongsTo
    user: User! @belongsTo
    agenda: Agenda @morphOne
}

type Examresult {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    exam: Exam! @belongsTo
    user: User! @belongsTo
    examsession: Examsession! @belongsTo
    studentanswers: [StudentAnswer!]! @hasMany
    grade: Float!
}

type Examsession {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    exam: Exam @belongsTo
    open_at: String
    close_at: String
    token: String
}

type Examtracker {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    examsession: Examsession @belongsTo
    exam: Exam! @belongsTo
    user: User! @belongsTo
    examsession: Examsession! @belongsTo
    last_activity: String!
    minute_passed: Int!
}

type Examtype {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    exams: [Exam!]! @hasMany
}

enum MeetingContentType {
    Article
    DRAW
}
type MeetingContent {
    type: MeetingContentType
    content: String
}

interface MeetingData {
    url: String
    type: MeetingMedia
    content: String
    attachment: Attachment
}
enum MeetingMedia {
    YOUTUBE
    IMAGE
    AUDIO
    VIDEO
    DOCUMENT
    ARTICLE_NOW
}

type Meeting {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    start_at: String!
    finish_at: String
    content: MeetingContent
    data: MeetingData
    description: String
    classroom: Classroom! @belongsTo
    article: Article @belongsTo
    subject: Subject! @belongsTo
    user: User! @belongsTo
    rooms: [Room!]! @morphMany
    attachments: [Attachment!]! @morphMany
    attendances: Agenda @morphOne
}

union Messageable = Room | PrivateRoom

type Message {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user: User @belongsTo
    content: String!
    messageable: Messageable @morphTo
}

type Packagequestion {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    questions: [Question!]! @belongsToMany
    user: User! @belongsTo
    subject: Subject! @belongsTo
    classtype: Classtype! @belongsTo
    editable: Boolean!
    visibility: Visibility
}

union Priceable = Article

type Price {
    priceable: Priceable @morphTo
}

type PrivateRoom {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    messages: [Message!]! @morphMany
    firstmessage: Message @morphOne
    first: User! @belongsTo
    second: User! @belongsTo
}
enum QuestionType {
    MULTI_CHOICE
    ESSAY
    FILLER
    SURVEY
    SLIDE
    MANY_ANSWERS
}
type Question {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user: User @belongsTo
    subject: Subject! @belongsTo
    classtype: Classtype! @belongsTo
    editable: Boolean!
    answers: [Answer!]! @hasMany
    correctanswer: Answer @hasOne
    attachments: [Attachment!]! @morphMany
    subject: Subject! @belongsTo
    classtype: Classtype @belongsTo
    type: QuestionType!
    content: String!
    visibility: Visibility
}

union Roomable = Meeting | Quiz

type Room {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    messages: [Message!]! @morphMany
    users: [User!]! @belongsToMany
    roomable: Roomable @morphTo
    quizresults: [Quizresult!]! @hasMany
    identifier: String!
    is_enabled: Boolean!
}

type Schooltype {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    level: Int!
    classtypes: [Classtype!]! @hasMany
    schools: [School!]! @hasMany
}

type StudentAnswer {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    answer_id: ID
    answer: Answer @belongsTo
    question: Question! @belongsTo
    examsession: Examsession! @belongsTo
    user: User! @belongsTo
    exam: Exam! @belongsTo
    examresult: Examresult! @belongsTo
    content: String
    is_correct: Boolean!
    is_processed: Boolean!
    grade: Float!
}

type StudentAssigment {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    assigment: Assigment! @belongsTo
    user: User! @belongsTo
    attachments: [Attachment!]! @morphMany
    content: String
    external_url: String
    grade: Float!
    is_graded: Boolean!
    comment: String
    edited_times: Int!
    turned_at: String
}

enum SubjectType {
    GENERAL @enum(value: "GENERAL")
    VOCATIONAL @enum(value: "VOCATIONAL")
    LOCAL_CONTENT @enum(value: "LOCAL_CONTENT")
    SPECIAL_DEVELOPMENT @enum(value: "SPECIAL_DEVELOPMENT")
}

type Subject {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    schools: [School!]! @belongsToMany
    meetings: [Meeting!]! @hasMany
    abbreviation: String
    description: String
    type: SubjectType
}

union Transactionable = Access | Quizreward

enum TransactionStatus {
    STAGING
    PENDING
    SUCCESS
    FAILED
}

type Transaction {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    from: Float!
    to: Float!
    amount: Float!
    voucher: Voucher
    uuid: String!
    payment_method: String
    status: TransactionStatus
    is_paid: Boolean!
    staging_url: String
    invoice_request: String
    invoice_response: String
    transactionable: Transactionable @morphTo
    description: String
}

enum Gender {
    Male
    Female
}
enum Roles {
    ADMIN
    STUDENT_PPDB
    GENERAL
    TEACHER
    STUDENT
    BIMBEL
    GUARDIAN
}

type Identity {
    type: String!
    identifier: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    province: Province @belongsTo
    city: City @belongsTo
    district: District @belongsTo
    childrens: [User!]! @hasMany
    child(id: ID! @eq): User @find
    attachments: [Attachment!]! @hasMany
    articles: [Article!]! @hasMany
    frontarticles: [Article!]! @hasMany
    profilepicture: Attachment @morphOne
    followers: [User!]! @belongsToMany
    requestfollowers: [User!]! @belongsToMany
    followings: [User!]! @belongsToMany
    rooms: [Room!]! @belongsToMany
    school: School @belongsTo
    attendances: [Attendance!]! @hasMany
    roles: Roles
    mainschool: School
    balance: Float!
    phone: String!
    dob: DateTime
    address: String
    gender: Int
    "Admin"
    is_admin: Boolean!
    "Student"
    myclassrooms: [Classroom!]! @belongsToMany
    guardian: User @belongsTo
    consultations(where: _ @whereConditions(columns: ["id"])): [Consultation!]!
        @hasMany
    nisn: String
    school: School
    classtype: Classtype
    parent: User

    studentppdbs: [StudentPpdb!]! @hasMany
    "Teacher"
    is_bimbel: Boolean!
    adminschools(where: _ @whereConditions(columns: ["school_id"])): [School!]!
        @belongsToMany
    homeroomschools(
        where: _ @whereConditions(columns: ["school_id"])
    ): [School!]! @belongsToMany
    headmasterschools(
        where: _ @whereConditions(columns: ["school_id"])
    ): [School!]! @belongsToMany
    academic_degree: String
    specialty: String
    hidden_attribute: [String]
    absents(where: _ @whereConditions(columns: ["name"])): [Absent!]! @hasMany
    schools: [School!]! @belongsToMany
    subjects(where: _ @whereConditions(columns: ["name"])): [Subject!]!
        @belongsToMany
    questions(where: _ @whereConditions(columns: ["subject_id"])): [Question!]!
        @hasMany
    exams(where: _ @whereConditions(columns: ["name", "subject_id"])): [Exam!]!
        @hasMany
    classrooms(
        where: _ @whereConditions(columns: ["name", "subject_id"])
    ): [Classroom!]! @hasMany
    assigments(
        where: _ @whereConditions(columns: ["id", "name", "subject_id"])
    ): [Assigment!]! @hasMany
    packagequestions(
        where: _ @whereConditions(columns: ["name", "subject_id"])
    ): [Packagequestion!]! @hasMany
    meetings(
        where: _ @whereConditions(columns: ["name", "subject_id"])
    ): [Meeting!]! @hasMany
    examresults(where: _ @whereConditions(columns: ["name"])): [Examresult!]!
        @hasMany
    studentassigments: [StudentAssigment!]! @hasMany

    studentabsents: [Absent!]! @hasMany
    studentanswers: [StudentAnswer!]! @hasMany
    studentconsultations(
        where: _ @whereConditions(columns: ["id"])
    ): [Consultation!]! @hasMany
    forms: [Form!]! @hasMany
    reports: [Report!]! @hasMany
    access: [String]
    main_school: School
    accesses: [Access!]! @belongsToMany
    rawaccesses: [Access!]! @belongsToMany
    transactions: [Transaction!]! @hasMany
    myreports: [Report!]! @belongsToMany
    quizzes(
        where: _ @whereConditions(columns: ["name", "subject_id"])
    ): [Quiz!]! @hasMany
    agendas: [Agenda!]! @hasMany
    identity: [Identity]

    major: Major @belongsTo
    extracurriculars: [Extracurricular!]! @belongsToMany
}

enum FormStatus {
    PENDING @enum(value: 0)
    PROCESSED @enum(value: 1)
    FINISHED @enum(value: 2)
    REJECTED @enum(value: 3)
}

enum FormType {
    REQUEST_TUTOR @enum(value: "REQUEST_TUTOR")
    REQUEST_ADD_SUBJECT @enum(value: "REQUEST_ADD_SUBJECT")
    REQUEST_COUNSELOR @enum(value: "REQUEST_COUNSELOR")
    REQUEST_HEADMASTER @enum(value: "REQUEST_HEADMASTER")
    REQUEST_ADMIN_SCHOOL @enum(value: "REQUEST_ADMIN_SCHOOL")
    REQUEST_HOMEROOM @enum(value: "REQUEST_HOMEROOM")
    REQUEST_STUDENT_PPDB @enum(value: "REQUEST_STUDENT_PPDB")
}

type FormData {
    message: String
}

union FormTemplateDataInput = FormTemplateData | FormData

type Form {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    # the type should be [FormTemplateDataInput] but i cant get it to work
    user: User! @belongsTo
    data: Mixed
    type: FormType
    is_ppdb: Boolean!
    is_verified: Boolean!
    is_locked: Boolean!
    attachments: [Attachment!]! @morphMany
    comment: String
    status: FormStatus
}

type Wave {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!

    education_year_start: Int!
    education_year_end: Int!
    max_join: Int!
    open_at: DateTime!
    close_at: DateTime!

    allow_extracurricular: Boolean!
    allow_major: Boolean!
    is_paid: Boolean!
    price: Float!

    school: School! @belongsTo

    studentppdbs: [StudentPpdb!]! @hasMany
    studentppdbCount: Int! @count(relation: "studentppdbs")
}

type Major {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!

    abbreviation: String!
    description: String!
}

type Extracurricular {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!

    abbreviation: String!
    description: String!
}

enum ReportType {
    GRADE
}

type Report {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    data: Mixed
    user: User! @belongsTo
    users: [User!]! @belongsToMany
    type: ReportType
}

type Access {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    price: Float!
    duration: Int!
    roles: Roles
    ability: [String]
}

enum QuizDifficulty {
    EASY
    MEDIUM
    HARD
}

type Quiz {
    id: ID!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    quizreward: Quizreward @hasOne
    questions: [Question!]! @belongsToMany
    firstquestion: [Question!]! @belongsToMany
    subject: Subject! @belongsTo
    user: User! @belongsTo
    rooms: [Room!]! @morphMany
    thumbnail: Attachment @morphOne
    description: String!
    played_count: Int!
    is_rewarded: Boolean!
    difficulty: QuizDifficulty
    visibility: Visibility

    morphable: String!
    likes: [Like!]!
        @orderBy(column: "created_at", direction: DESC)
        @morphMany(type: CONNECTION)
    comments: [Comment!]!
        @orderBy(column: "created_at", direction: DESC)
        @morphMany(type: CONNECTION)

    likeCount: Int! @count(relation: "likes")
    commentCount: Int! @count(relation: "comments")
}

type Like {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
}

type Comment {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    content: String!
}

type Quizreward {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    transaction: Transaction! @morphOne
    quiz: Quiz! @belongsTo
    reward: Reward! @belongsTo
}

type Quizresult {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    quiz: Quiz! @belongsTo
    user: User! @belongsTo
    grade: Float!
    room: Room
    start_at: String!
    finish_at: String
}

type Reward {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    description: String!
    prize_pool: Float!
    reward: Float!
    minimum_play_count: Int!
    is_active: Boolean
}

type Voucher {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    code: String!
    percentage: Float!
    description: String
    expired_at: String!
}

enum FormTemplateStatus {
    ACTIVE @enum(value: "ACTIVE")
    DISABLED @enum(value: "DISABLED")
}

type FormTemplate {
    id: ID!
    comment: String
    data: [FormTemplateData!]!
    status: FormTemplateStatus!
    created_at: DateTime!
    updated_at: DateTime!
}

type FormTemplateData {
    hash: String!
    name: String!
    description: String
    blocks: [Input!]!
}

enum InputType {
    SELECT @enum(value: "SELECT")
    TEXT @enum(value: "TEXT")
    NUMBER @enum(value: "NUMBER")
    RADIO @enum(value: "RADIO")
    FILE @enum(value: "FILE")
    DATE @enum(value: "DATE")
    TIME @enum(value: "TIME")
    TEXTAREA @enum(value: "TEXTAREA")
}

type Input {
    hash: String!
    name: String!
    type: InputType!
    description: String
    defaultValue: String
    placeholder: String
    required: Boolean
    regex: String
    options: [String]

    value: String
    metadata: Mixed
}

enum StudentPpdbStatus {
    APPROVED @enum(value: "APPROVED")
    REJECTED @enum(value: "REJECTED")
    PROCESSED @enum(value: "PROCESSED")
    PENDING @enum(value: "PENDING")
    PERMANENT_REJECTED @enum(value: "PERMANENT_REJECTED")
}

type StudentPpdb {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    status: StudentPpdbStatus!
    comment: String
    is_paid: Boolean!
    changer: User
    school: School! @belongsTo
    user: User! @belongsTo
    wave: Wave @belongsTo
    form: Form @belongsTo
    identifier: String!
    major: Major @belongsTo
    extracurriculars: [Extracurricular!]! @belongsToMany
}
